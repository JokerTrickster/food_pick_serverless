AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 10  # Lambda 함수 타임아웃 설정
    Handler: bootstrap
    Runtime: provided.al2023
    MemorySize: 128
    Architectures:                   # 공통 아키텍처 설정
      - x86_64
    VpcConfig:                       # 공통 VPC 설정
      SecurityGroupIds:
        - sg-07fc0de84a8e119c0
      SubnetIds:
        - subnet-017c0de3d874cab7e
        - subnet-00bd54fe53b26180d

Resources:
  ### 공통 IAM Role 생성 ###
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowSSMAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "ssm:*"
                Resource: "*"
        - PolicyName: AllowEC2NetworkInterface
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                Resource: "*"
        - PolicyName: AllowS3Access  # S3 액세스 권한 추가
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"  # 객체 읽기 권한
                Resource:
                  - "*"           # S3 버킷
  ### API Gateway ###
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Cors:  # CORS 설정
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"

  ### Users Lambda Functions ###
  UsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./users/
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /v0.1/users/{userID}
            Method: GET
            RestApiId: !Ref ApiGateway
        DeleteUser:
          Type: Api
          Properties:
            Path: /v0.1/users
            Method: DELETE
            RestApiId: !Ref ApiGateway
        UpdateUserProfile:
          Type: Api
          Properties:
            Path: /v0.1/users/profile
            Method: PUT
            RestApiId: !Ref ApiGateway
        UpdateUserProfileImage:
          Type: Api
          Properties:
            Path: /v0.1/users/profiles/image
            Method: POST
            RestApiId: !Ref ApiGateway
        MessageUser:
          Type: Api
          Properties:
            Path: /v0.1/users/message
            Method: POST
            RestApiId: !Ref ApiGateway
        AllMessageUser:
          Type: Api
          Properties:
            Path: /v0.1/users/message/all
            Method: POST
            RestApiId: !Ref ApiGateway

  ### Foods Lambda Functions ###
  FoodsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./foods/
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        RecommendFoods:
          Type: Api
          Properties:
            Path: /v0.1/foods/recommend
            Method: POST
            RestApiId: !Ref ApiGateway
        DailyRecommendFoods:
          Type: Api
          Properties:
            Path: /v0.1/foods/daily-recommend
            Method: GET
            RestApiId: !Ref ApiGateway
        MetaFoods:
          Type: Api
          Properties:
            Path: /v0.1/foods/meta
            Method: GET
            RestApiId: !Ref ApiGateway
        RankFoods:
          Type: Api
          Properties:
            Path: /v0.1/foods/rank
            Method: GET
            RestApiId: !Ref ApiGateway
        SelectFoods:
          Type: Api
          Properties:
            Path: /v0.1/foods/select
            Method: POST
            RestApiId: !Ref ApiGateway

  ### Auth Lambda Functions ###
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./auth/
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        CheckEmailAuth:
          Type: Api
          Properties:
            Path: /v0.1/auth/email/check
            Method: GET
            RestApiId: !Ref ApiGateway
        GuestAuth:
          Type: Api
          Properties:
            Path: /v0.1/auth/guest
            Method: POST
            RestApiId: !Ref ApiGateway
        LogoutAuth:
          Type: Api
          Properties:
            Path: /v0.1/auth/logout
            Method: POST
            RestApiId: !Ref ApiGateway
        ReissueAuth:
          Type: Api
          Properties:
            Path: /v0.1/auth/token/reissue
            Method: PUT
            RestApiId: !Ref ApiGateway
        RequestPasswordAuth:
          Type: Api
          Properties:
            Path: /v0.1/auth/password/request
            Method: POST
            RestApiId: !Ref ApiGateway
        RequestSignupAuth:
          Type: Api
          Properties:
            Path: /v0.1/auth/signup/request
            Method: POST
            RestApiId: !Ref ApiGateway
        SaveFCMTokenAuth:
          Type: Api
          Properties:
            Path: /v0.1/auth/fcm/token
            Method: POST
            RestApiId: !Ref ApiGateway
        SigninAuth:
          Type: Api
          Properties:
            Path: /v0.1/auth/signin
            Method: POST
            RestApiId: !Ref ApiGateway
        SignupAuth:
          Type: Api
          Properties:
            Path: /v0.1/auth/signup
            Method: POST
            RestApiId: !Ref ApiGateway
        ValidatePasswordAuth:
          Type: Api
          Properties:
            Path: /v0.1/auth/password/validate
            Method: POST
            RestApiId: !Ref ApiGateway
        KakaoOauth:
          Type: Api
          Properties:
            Path: /v0.1/auth/kakao
            Method: POST
            RestApiId: !Ref ApiGateway
        GoogleOauthCallback:
          Type: Api
          Properties:
            Path: /v0.1/auth/google/callback
            Method: GET
            RestApiId: !Ref ApiGateway
Outputs:
  ApiUrl:
    Description: "API Gateway URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev"
